---
import { getPostUrlBySlug } from '@utils/url-utils'
import PostCard from './PostCard.astro'

const { page } = Astro.props

const posts = page.data
const featuredPostsCount = 4 // Number of posts to display full-width
const featuredPosts = posts.slice(0, featuredPostsCount)
const regularPosts = posts.slice(featuredPostsCount)

let animationDelayCounter = 0
const animationInterval = 50
---
<div class="transition rounded-[var(--radius-large)] bg-[var(--card-bg)] py-1 md:py-0 md:bg-transparent mb-4">
    <!-- Featured Posts Section -->
    {featuredPosts.length > 0 && (
        <div class="flex flex-col gap-4 mb-4">
            {featuredPosts.map((entry: any) => {
                const currentDelay = animationDelayCounter++;
                return (
                    <PostCard
                        entry={entry}
                        title={entry.data.title}
                        tags={entry.data.tags}
                        category={entry.data.category}
                        published={entry.data.published}
                        updated={entry.data.updated}
                        url={getPostUrlBySlug(entry.slug)}
                        image={entry.data.image}
                        description={entry.data.description}
                        draft={entry.data.draft}
                        class:list={["onload-animation", "w-full"]}
                        style={`animation-delay: calc(var(--content-delay) + ${currentDelay * animationInterval}ms);`}
                    />
                );
            })}
        </div>
    )}

    <!-- Regular Posts Section - Grid -->
    {regularPosts.length > 0 && (
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            {regularPosts.map((entry: any) => {
                const currentDelay = animationDelayCounter++;
                return (
                    <PostCard
                        entry={entry}
                        title={entry.data.title}
                        tags={entry.data.tags}
                        category={entry.data.category}
                        published={entry.data.published}
                        updated={entry.data.updated}
                        url={getPostUrlBySlug(entry.slug)}
                        image={entry.data.image}
                        description={entry.data.description}
                        draft={entry.data.draft}
                        class:list={["onload-animation"]}
                        style={`animation-delay: calc(var(--content-delay) + ${currentDelay * animationInterval}ms);`}
                    />
                );
            })}
        </div>
    )}
</div>